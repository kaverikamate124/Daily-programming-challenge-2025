#include <bits/stdc++.h>
using namespace std;
int shortestPath(int V,vector<vector<int>>& edges,int start, int end){
    vector<vector<int>>adj(V);
    for (auto &edge:edges){
        adj[edge[0]].push_back(edge[1]);
        adj[edge[1]].push_back(edge[0]);
    }
    vector<int>dist(V,-1);
    queue<int>q;
    dist[start]=0;
    q.push(start);
    while(!q.empty()){
        int node=q.front();
        q.pop();
        for (int neighbor: adj[node]){
            if (dist[neighbor]==-1) { 
                dist[neighbor]= dist[node]+1;
                q.push(neighbor);
                if (neighbor==end) 
                    return dist[neighbor]; 
            }
        }
    }
    return -1;
}
int main() {
    int V=5;
    vector<vector<int>>edges={{0,1},{0,2},{1,3},{2,3},{3,4}};
    int start=0,end=4;
    cout<<"Shortest Path Length: " <<shortestPath(V,edges, start,end)<<endl;
    return 0;
}