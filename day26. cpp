#include <iostream>
#include <vector>
using namespace std;

bool dfs(int node, int parent, vector<vector<int>>& adj, vector<bool>& visited) {
    visited[node] =true;
    for (int neigh : adj[node]) {
        if (!visited[neigh]) {
            if (dfs(neigh, node, adj, visited)) 
                return true;  
        }
        else if (neigh!=parent) {
            return true;
        }
    }
    return false;
}
bool hasCycle(int V,vector<vector<int>>& edges){
    vector<vector<int>>adj(V);
    for (auto e:edges){
        adj[e[0]].push_back(e[1]);
        adj[e[1]].push_back(e[0]); 
    }
    vector<bool>visited(V,false);  for (int i= 0;i< V;i++) {
        if (!visited[i]){
            if (dfs(i,-1,adj, visited)) 
            return true;
        }
    }
    return false;
}
int main() {
    int V=5;
    vector<vector<int>>edges={{0,1},{1,2},{2,3},{3,4},{4,0}};
    if (hasCycle(V, edges))
        cout<<"true";
    else
        cout<<"false";
     return 0;
}